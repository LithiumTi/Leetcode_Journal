char* longestPalindrome(char *s);
int PalindromeSingleCenter(char *center,char *boundary);
int PalindromeDoubleCenter(char *left,char *right,char *boundary);
char* GiveAnswer(char *SingleCenter,char *DoubleCenter,int len1,int len2);

char* longestPalindrome(char *s){
	char *index=s,*key1=NULL,*key2=NULL;
	int len=0,max1=0,max2=0;
	for(;*index!='\0';index++){//index++ This point can be polished
		len=PalindromeSingleCenter(index,s);
		if(len>max1){
			max1=len;
			key1=index;
		}
	}
	for(index=s;*index!='\0';index++){
		char *left=index,*right=index+1;
		len=PalindromeDoubleCenter(left,right,s);
		if(len>max2){
			max2=len;
			key2=left;
		}
	}
	char *Answer=NULL;
	Answer=GiveAnswer(key1,key2,max1,max2);
	return Answer;
} 

int PalindromeSingleCenter(char *center,char *boundary){
	int LeftIndex=1,RightIndex=1,len=1;
//	if((center-LeftIndex)==boundary&&*(center-LeftIndex)==*(center+RightIndex)) len+=2;
//	for(;(center-LeftIndex)!=boundary&&*(center+RightIndex)!='\0';LeftIndex++,RightIndex++,len+=2){
//		if(*(center-LeftIndex)!=*(center+RightIndex)) break;
//	}
	if(center==boundary) return len;
	for(;1;LeftIndex++,RightIndex++){
		if(*(center-LeftIndex)==*(center+RightIndex)){
			len+=2;
		}else break;
		if((center-LeftIndex)==boundary||*(center+RightIndex)=='\0') break;
	}
	return len;
}

int PalindromeDoubleCenter(char *left,char *right,char *boundary){
	int LeftIndex=0,RightIndex=0,len=0;
//	if(left-LeftIndex==boundary&&*(left-LeftIndex)==*(right+RightIndex)) len+=2;
//	for(;left-LeftIndex!=boundary&&*(right+RightIndex)!='\0';LeftIndex++,RightIndex++,len+=2){
//		if(*(left-LeftIndex)!=*(right+RightIndex)) break;
//	}
	for(;1;LeftIndex++,RightIndex++){
		if(*(left-LeftIndex)==*(right+RightIndex)){
			len+=2;
		}else break;
		if(left-LeftIndex==boundary||*(right+RightIndex)=='\0') break;
	}
	return len;
}

char* GiveAnswer(char *SingleCenter,char *DoubleCenter,int len1,int len2){
	char *Answer=NULL,*head=NULL;
	int len=0;
	if(len1>len2){
		head=SingleCenter-(len1-1)/2;
		len=len1;
	}else{
		head=DoubleCenter-(len2-2)/2;
		len=len2;
	}
	Answer=(char*)malloc(sizeof(char)*(len+1));
	for(int i=0;i<len;i++){
		Answer[i]=head[i];
	}
	Answer[len]='\0';
	return Answer;
}
